#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_NODES 100

typedef struct Queue{
    int items[MAX_NODES];
    int front ,rear;
}Queue;

void initQueue(Queue *q){
    q->front =-1;
    q->rear=-1;
}

bool isEmpty(Queue *q){
    return q->front==-1;
}

void enqueue(Queue *q,int value){
    if(q->rear==MAX_NODES-1){
        printf("Queue overflown\n");
        return ;
    }
    if(q->front==-1){

        q->front=0;
    }
    q->items[++q->rear]=value;
}

int dequeue(Queue *q){
    if(isEmpty(q)){
        printf("Queue Underflow\n");
        return -1;
    }
    int value=q->items[q->front];
    if(q->front == q->rear){
        q->front=q->rear=-1;
    }
    else{
        q->front++;
    }
    return value;
}

typedef struct Graph {
    int adjMatrix[MAX_NODES][MAX_NODES];
    int numNodes;
}Graph;

void initGraph(Graph *g,int numNodes){
    g->numNodes=numNodes;
    for(int i=0;i<numNodes;i++){
        for(int j=0;j<numNodes;j++){
            g->adjMatrix[i][j]=0;
        }
    }
}

void addEdge(Graph *g,int src,int dest){
    g->adjMatrix[src][dest]=1;
    g->adjMatrix[dest][src]=1;
}

void bfs(Graph *g,int startNode){
    bool visited[MAX_NODES]={false};
    Queue q;
    initQueue(&q);
    visited[startNode]=true;
    enqueue(&q,startNode);
    printf("BFS TRAVERSAL: ");
    while(!isEmpty(&q)){
        int currentNode=dequeue(&q);
        printf("%d ",currentNode);
        for(int i=0;i<g->numNodes;i++){
            if(g->adjMatrix[currentNode][i]==1 && !visited[i]){
                visited[i]=true;
                enqueue(&q,i);
            }
        }
    }

}

int main(){
    Graph  g;
    initGraph(&g,5);
    addEdge(&g,0,1);
    addEdge(&g,0,2);
    addEdge(&g,1,3);
    addEdge(&g,1,4);
    addEdge(&g,2,4);
    bfs(&g,0);
}
